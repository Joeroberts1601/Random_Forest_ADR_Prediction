import pandas as pd
import os
import networkx as nx
import plotly.graph_objects as go

# Set the path to your "Matching Signals" folder
matching_signals_dir = "Drugs of Interest/Target associations/Matching Signals"

# Initialize the graph
G = nx.Graph()

# Load files and add edges
for file_name in os.listdir(matching_signals_dir):
    if file_name.endswith(".csv"):
        target = file_name.replace("_matching signals.csv", "")
        df = pd.read_csv(os.path.join(matching_signals_dir, file_name))
        drugs = df.iloc[:, 0].dropna().unique()
        for drug in drugs:
            G.add_node(target, type='target')
            G.add_node(drug, type='drug')
            G.add_edge(target, drug)

# Layout
pos = nx.spring_layout(G, seed=42)
target_nodes = [n for n, d in G.nodes(data=True) if d['type'] == 'target']
drug_nodes = [n for n, d in G.nodes(data=True) if d['type'] == 'drug']

import networkx as nx
import plotly.graph_objects as go

# Node importance by degree
node_sizes = [10 + 1 * G.degree(n) for n in G.nodes()]
node_colors = ['red' if G.nodes[n]['type'] == 'target' else 'blue' for n in G.nodes()]
node_texts = [f"{n} ({G.nodes[n]['type']})" for n in G.nodes()]

# Layout
pos = nx.spring_layout(G, seed=42)

# Edges
edge_x, edge_y = [], []
for edge in G.edges():
    x0, y0 = pos[edge[0]]
    x1, y1 = pos[edge[1]]
    edge_x += [x0, x1, None]
    edge_y += [y0, y1, None]

edge_trace = go.Scatter(
    x=edge_x, y=edge_y,
    line=dict(width=0.5, color='#888'),
    hoverinfo='none',
    mode='lines'
)

# Nodes
node_trace = go.Scatter(
    x=[pos[n][0] for n in G.nodes()],
    y=[pos[n][1] for n in G.nodes()],
    mode='markers+text',
    text=[n for n in G.nodes()],
    textposition="top center",
    hoverinfo='text',
    marker=dict(
        color=node_colors,
        size=node_sizes,
        line=dict(width=2)
    ),
    hovertext=node_texts
)

fig = go.Figure(data=[edge_trace, node_trace],
                layout=go.Layout(
                    title='Enhanced Drugâ€“Target Network',
                    titlefont=dict(size=18),
                    showlegend=False,
                    hovermode='closest',
                    margin=dict(b=20, l=5, r=5, t=40),
                    xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    yaxis=dict(showgrid=False, zeroline=False, showticklabels=False)
                ))

fig.show()
